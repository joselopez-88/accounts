server:
  port: 8080
spring:
  application:
    name: accounts
# Configuracion de la base de datos
  datasource:
    url: jdbc:h2:mem:testdb
    driverClassName: org.h2.Driver
    username: sa
    password: ''
  h2:
    console:
      enabled: true
# Configuracion de JPA
  jpa:
    database-platform: org.hibernate.dialect.H2Dialect
    hibernate:
      ddl-auto: update
    show-sql: true
# Estableciendo el perfil
  profiles:
    active:
    - "prod"
# Configuracion de conexion al configserver
  config:
    import:
    - "optional:configserver:http://localhost:8071/"
#Activando el uso de resilience4j para feign
  cloud:
    openfeign:
      circuitbreaker:
        enabled: true    
# Configuracion de actuator
management:
  endpoints:
    web:
      exposure:
        include:
        - health
        - info
        - shutdown
        - metrics
        - circuitbreakers
        - circuitbreakerevents        
# Activando la comprobacion de estado del microservicio
  health:
    readinessstate:
      enabled: true
    livenessstate:
      enabled: true        
## permite acceder al endpoint /actuator/shutdown desde cualquier origen sin autenticación
  endpoint:
    shutdown:
      access: unrestricted      
    health:
      probes:
        enabled: true      
## Agrega automáticamente al endpoint /actuator/info todas las variables de entorno disponibles
  info:
    env:
      enabled: true
#Configuracion eureka
eureka:
  instance:
    preferIpAddress: true
  client:
    fetchRegistry: true
    registerWithEureka: true
    serviceUrl:
      defaultZone: http://localhost:8070/eureka/
#Configuracion informacion mostrada en el endpoint de actuator /actuator/info
info:
  app:
    name: "accounts"
    description: "EazyBank Accounts Application"
    version: "1.0.0"
#Estableciendo la configuracion de logging DEBUG en el paquete com.eazybites.accounts del proyecto
logging:
  level:
    com:
      eazybites:
        accounts: DEBUG
#Configuracion de resilience4j
resilience4j:
  circuitbreaker:
    configs:
      default:
        slidingWindowSize: 10 # Monitoreando los ultimos 10 request para calcular el porcentaje de fallos.
        minimumNumberOfCalls: 5 # número mínimo de llamadas que deben existir en la ventana antes de calcular el ratio de fallos (de los mencionados en slidingWindowSize )  
        permittedNumberOfCallsInHalfOpenState: 2 # cuántas llamadas de prueba se permiten en HALF_OPEN state
        failureRateThreshold: 50 # umbral de porcentaje de fallos que dispara la apertura de circuito abierto
        waitDurationInOpenState: 10000 # tiempo que el CB permanece OPEN antes de permitir pruebas. (en milisegundos)        
# Configuracion Retry Pattern
  retry:
    configs:
      default:
        maxAttempts: 3 # Numero maximo de intentos
        waitDuration: 500 #  representa el initialDelay : Tiempo de espera base entre intentos
        enableExponentialBackoff: true # aleatoriedad en el backoff: Si está en true, introduce una variación aleatoria en los tiempos
        exponentialBackoffMultiplier: 2 # multiplicador exponencial: delay(n) = initialDelay × (multiplicador ^ (n-1)) n= numero de reintento (para calcular el retraso en el intento)
        ignoreExceptions:
          - java.lang.NullPointerException
        # Cuando se define retryExceptions, indica que las excepciones no indicadas se deben ignorar, haciendo innecesario el uso de ignoreExceptions
        retryExceptions:
          - java.util.concurrent.TimeoutException
# Configuracion RateLimiter
  ratelimiter:
    configs:
      default:
        limitRefreshPeriod: 5000 # defines la “ventana de tiempo”: Cada cuánto tiempo se renuevan los permisos (en milisegundos)
        limitForPeriod: 1 # defines cuántos requests caben en esa ventana: Cuántos permisos se pueden consumir en cada periodo
        timeoutDuration: 1000 # defines qué hacer si la ventana ya está saturada: Tiempo máximo de espera (en milisegundos) si no hay permisos disponibles
